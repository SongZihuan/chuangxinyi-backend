// Code generated by goctlwt. DO NOT EDIT.

package db

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/wuntsong-org/go-zero-plus/core/stores/builder"
	"github.com/wuntsong-org/go-zero-plus/core/stores/sqlc"
	"github.com/wuntsong-org/go-zero-plus/core/stores/sqlx"
	"github.com/wuntsong-org/go-zero-plus/core/stringx"
)

var (
	websiteFundingFieldNames          = builder.RawFieldNames(&WebsiteFunding{})
	websiteFundingRows                = strings.Join(websiteFundingFieldNames, ",")
	websiteFundingRowsExpectAutoSet   = strings.Join(stringx.Remove(websiteFundingFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	websiteFundingRowsWithPlaceHolder = strings.Join(stringx.Remove(websiteFundingFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	websiteFundingModel interface {
		Insert(ctx context.Context, data *WebsiteFunding) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*WebsiteFunding, error)
		Update(ctx context.Context, data *WebsiteFunding) error
		Delete(ctx context.Context, id int64) error
	}

	defaultWebsiteFundingModel struct {
		conn  sqlx.SqlConn
		table string
	}

	WebsiteFunding struct {
		Id          int64        `db:"id"`
		WebId       int64        `db:"web_id"`
		Type        int64        `db:"type"`
		FundingId   string       `db:"funding_id"`
		Profit      int64        `db:"profit"`
		Expenditure int64        `db:"expenditure"`
		Year        int64        `db:"year"`
		Month       int64        `db:"month"`
		Day         int64        `db:"day"`
		Remark      string       `db:"remark"`
		CreateAt    time.Time    `db:"create_at"`
		PayAt       time.Time    `db:"pay_at"`
		DeleteAt    sql.NullTime `db:"delete_at"`
	}
)

func newWebsiteFundingModel(conn sqlx.SqlConn) *defaultWebsiteFundingModel {
	return &defaultWebsiteFundingModel{
		conn:  conn,
		table: "`website_funding`",
	}
}

func (m *defaultWebsiteFundingModel) withSession(session sqlx.Session) *defaultWebsiteFundingModel {
	return &defaultWebsiteFundingModel{
		conn:  sqlx.NewSqlConnFromSession(session),
		table: "`website_funding`",
	}
}

func (m *defaultWebsiteFundingModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultWebsiteFundingModel) FindOne(ctx context.Context, id int64) (*WebsiteFunding, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", websiteFundingRows, m.table)
	var resp WebsiteFunding
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultWebsiteFundingModel) Insert(ctx context.Context, data *WebsiteFunding) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, websiteFundingRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.WebId, data.Type, data.FundingId, data.Profit, data.Expenditure, data.Year, data.Month, data.Day, data.Remark, data.PayAt, data.DeleteAt)
	return ret, err
}

func (m *defaultWebsiteFundingModel) Update(ctx context.Context, data *WebsiteFunding) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, websiteFundingRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.WebId, data.Type, data.FundingId, data.Profit, data.Expenditure, data.Year, data.Month, data.Day, data.Remark, data.PayAt, data.DeleteAt, data.Id)
	return err
}

func (m *defaultWebsiteFundingModel) tableName() string {
	return m.table
}
