// Code generated by goctlwt. DO NOT EDIT.

package db

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/wuntsong-org/go-zero-plus/core/stores/builder"
	"github.com/wuntsong-org/go-zero-plus/core/stores/sqlc"
	"github.com/wuntsong-org/go-zero-plus/core/stores/sqlx"
	"github.com/wuntsong-org/go-zero-plus/core/stringx"
)

var (
	workOrderCommunicateFileFieldNames          = builder.RawFieldNames(&WorkOrderCommunicateFile{})
	workOrderCommunicateFileRows                = strings.Join(workOrderCommunicateFileFieldNames, ",")
	workOrderCommunicateFileRowsExpectAutoSet   = strings.Join(stringx.Remove(workOrderCommunicateFileFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	workOrderCommunicateFileRowsWithPlaceHolder = strings.Join(stringx.Remove(workOrderCommunicateFileFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	workOrderCommunicateFileModel interface {
		Insert(ctx context.Context, data *WorkOrderCommunicateFile) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*WorkOrderCommunicateFile, error)
		Update(ctx context.Context, data *WorkOrderCommunicateFile) error
		Delete(ctx context.Context, id int64) error
	}

	defaultWorkOrderCommunicateFileModel struct {
		conn  sqlx.SqlConn
		table string
	}

	WorkOrderCommunicateFile struct {
		Id            int64        `db:"id"`
		OrderId       int64        `db:"order_id"`
		CommunicateId int64        `db:"communicate_id"`
		Key           string       `db:"key"`
		Fid           string       `db:"fid"`
		CreateAt      time.Time    `db:"create_at"`
		DeleteAt      sql.NullTime `db:"delete_at"`
	}
)

func newWorkOrderCommunicateFileModel(conn sqlx.SqlConn) *defaultWorkOrderCommunicateFileModel {
	return &defaultWorkOrderCommunicateFileModel{
		conn:  conn,
		table: "`work_order_communicate_file`",
	}
}

func (m *defaultWorkOrderCommunicateFileModel) withSession(session sqlx.Session) *defaultWorkOrderCommunicateFileModel {
	return &defaultWorkOrderCommunicateFileModel{
		conn:  sqlx.NewSqlConnFromSession(session),
		table: "`work_order_communicate_file`",
	}
}

func (m *defaultWorkOrderCommunicateFileModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultWorkOrderCommunicateFileModel) FindOne(ctx context.Context, id int64) (*WorkOrderCommunicateFile, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", workOrderCommunicateFileRows, m.table)
	var resp WorkOrderCommunicateFile
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultWorkOrderCommunicateFileModel) Insert(ctx context.Context, data *WorkOrderCommunicateFile) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?)", m.table, workOrderCommunicateFileRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.OrderId, data.CommunicateId, data.Key, data.Fid, data.DeleteAt)
	return ret, err
}

func (m *defaultWorkOrderCommunicateFileModel) Update(ctx context.Context, data *WorkOrderCommunicateFile) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, workOrderCommunicateFileRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.OrderId, data.CommunicateId, data.Key, data.Fid, data.DeleteAt, data.Id)
	return err
}

func (m *defaultWorkOrderCommunicateFileModel) tableName() string {
	return m.table
}
