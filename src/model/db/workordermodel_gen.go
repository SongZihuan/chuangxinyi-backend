// Code generated by goctlwt. DO NOT EDIT.

package db

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/wuntsong-org/go-zero-plus/core/stores/builder"
	"github.com/wuntsong-org/go-zero-plus/core/stores/sqlc"
	"github.com/wuntsong-org/go-zero-plus/core/stores/sqlx"
	"github.com/wuntsong-org/go-zero-plus/core/stringx"
)

var (
	workOrderFieldNames          = builder.RawFieldNames(&WorkOrder{})
	workOrderRows                = strings.Join(workOrderFieldNames, ",")
	workOrderRowsExpectAutoSet   = strings.Join(stringx.Remove(workOrderFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	workOrderRowsWithPlaceHolder = strings.Join(stringx.Remove(workOrderFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	workOrderModel interface {
		Insert(ctx context.Context, data *WorkOrder) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*WorkOrder, error)
		Update(ctx context.Context, data *WorkOrder) error
		Delete(ctx context.Context, id int64) error
	}

	defaultWorkOrderModel struct {
		conn  sqlx.SqlConn
		table string
	}

	WorkOrder struct {
		Id          int64        `db:"id"`
		Uid         string       `db:"uid"`
		UserId      int64        `db:"user_id"`
		Title       string       `db:"title"`
		From        string       `db:"from"`
		FromId      int64        `db:"from_id"`
		Remark      string       `db:"remark"`
		Status      int64        `db:"status"`
		CreateAt    time.Time    `db:"create_at"`
		LastReplyAt sql.NullTime `db:"last_reply_at"`
		FinishAt    sql.NullTime `db:"finish_at"`
		DeleteAt    sql.NullTime `db:"delete_at"`
	}
)

func newWorkOrderModel(conn sqlx.SqlConn) *defaultWorkOrderModel {
	return &defaultWorkOrderModel{
		conn:  conn,
		table: "`work_order`",
	}
}

func (m *defaultWorkOrderModel) withSession(session sqlx.Session) *defaultWorkOrderModel {
	return &defaultWorkOrderModel{
		conn:  sqlx.NewSqlConnFromSession(session),
		table: "`work_order`",
	}
}

func (m *defaultWorkOrderModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultWorkOrderModel) FindOne(ctx context.Context, id int64) (*WorkOrder, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", workOrderRows, m.table)
	var resp WorkOrder
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultWorkOrderModel) Insert(ctx context.Context, data *WorkOrder) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, workOrderRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Uid, data.UserId, data.Title, data.From, data.FromId, data.Remark, data.Status, data.LastReplyAt, data.FinishAt, data.DeleteAt)
	return ret, err
}

func (m *defaultWorkOrderModel) Update(ctx context.Context, data *WorkOrder) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, workOrderRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.Uid, data.UserId, data.Title, data.From, data.FromId, data.Remark, data.Status, data.LastReplyAt, data.FinishAt, data.DeleteAt, data.Id)
	return err
}

func (m *defaultWorkOrderModel) tableName() string {
	return m.table
}
