// Code generated by goctlwt. DO NOT EDIT.

package db

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/wuntsong-org/go-zero-plus/core/stores/builder"
	"github.com/wuntsong-org/go-zero-plus/core/stores/sqlc"
	"github.com/wuntsong-org/go-zero-plus/core/stores/sqlx"
	"github.com/wuntsong-org/go-zero-plus/core/stringx"
)

var (
	roleFieldNames          = builder.RawFieldNames(&Role{})
	roleRows                = strings.Join(roleFieldNames, ",")
	roleRowsExpectAutoSet   = strings.Join(stringx.Remove(roleFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	roleRowsWithPlaceHolder = strings.Join(stringx.Remove(roleFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	roleModel interface {
		Insert(ctx context.Context, data *Role) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Role, error)
		FindOneById(ctx context.Context, id int64) (*Role, error)
		Update(ctx context.Context, data *Role) error
		Delete(ctx context.Context, id int64) error
	}

	defaultRoleModel struct {
		conn  sqlx.SqlConn
		table string
	}

	Role struct {
		Id                   int64         `db:"id"`
		Name                 string        `db:"name"`
		Sign                 string        `db:"sign"`
		Describe             string        `db:"describe"`
		Belong               sql.NullInt64 `db:"belong"`
		Status               int64         `db:"status"`
		Permissions          string        `db:"permissions"`
		NotDelete            bool          `db:"not_delete"`
		NotChangeSign        bool          `db:"not_change_sign"`
		NotChangePermissions bool          `db:"not_change_permissions"`
		CreateAt             time.Time     `db:"create_at"`
		UpdateAt             time.Time     `db:"update_at"`
		DeleteAt             sql.NullTime  `db:"delete_at"`
	}
)

func newRoleModel(conn sqlx.SqlConn) *defaultRoleModel {
	return &defaultRoleModel{
		conn:  conn,
		table: "`role`",
	}
}

func (m *defaultRoleModel) withSession(session sqlx.Session) *defaultRoleModel {
	return &defaultRoleModel{
		conn:  sqlx.NewSqlConnFromSession(session),
		table: "`role`",
	}
}

func (m *defaultRoleModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultRoleModel) FindOne(ctx context.Context, id int64) (*Role, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", roleRows, m.table)
	var resp Role
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultRoleModel) FindOneById(ctx context.Context, id int64) (*Role, error) {
	var resp Role
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", roleRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultRoleModel) Insert(ctx context.Context, data *Role) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, roleRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Name, data.Sign, data.Describe, data.Belong, data.Status, data.Permissions, data.NotDelete, data.NotChangeSign, data.NotChangePermissions, data.DeleteAt)
	return ret, err
}

func (m *defaultRoleModel) Update(ctx context.Context, newData *Role) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, roleRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, newData.Name, newData.Sign, newData.Describe, newData.Belong, newData.Status, newData.Permissions, newData.NotDelete, newData.NotChangeSign, newData.NotChangePermissions, newData.DeleteAt, newData.Id)
	return err
}

func (m *defaultRoleModel) tableName() string {
	return m.table
}
