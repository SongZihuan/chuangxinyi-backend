// Code generated by goctlwt. DO NOT EDIT.

package db

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/wuntsong-org/go-zero-plus/core/stores/builder"
	"github.com/wuntsong-org/go-zero-plus/core/stores/sqlc"
	"github.com/wuntsong-org/go-zero-plus/core/stores/sqlx"
	"github.com/wuntsong-org/go-zero-plus/core/stringx"
)

var (
	passwordFieldNames          = builder.RawFieldNames(&Password{})
	passwordRows                = strings.Join(passwordFieldNames, ",")
	passwordRowsExpectAutoSet   = strings.Join(stringx.Remove(passwordFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	passwordRowsWithPlaceHolder = strings.Join(stringx.Remove(passwordFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	passwordModel interface {
		Insert(ctx context.Context, data *Password) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Password, error)
		Update(ctx context.Context, data *Password) error
		Delete(ctx context.Context, id int64) error
	}

	defaultPasswordModel struct {
		conn  sqlx.SqlConn
		table string
	}

	Password struct {
		Id           int64          `db:"id"`
		UserId       int64          `db:"user_id"`
		PasswordHash sql.NullString `db:"passwordHash"`
		CreateAt     time.Time      `db:"create_at"`
		DeleteAt     sql.NullTime   `db:"delete_at"`
	}
)

func newPasswordModel(conn sqlx.SqlConn) *defaultPasswordModel {
	return &defaultPasswordModel{
		conn:  conn,
		table: "`password`",
	}
}

func (m *defaultPasswordModel) withSession(session sqlx.Session) *defaultPasswordModel {
	return &defaultPasswordModel{
		conn:  sqlx.NewSqlConnFromSession(session),
		table: "`password`",
	}
}

func (m *defaultPasswordModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultPasswordModel) FindOne(ctx context.Context, id int64) (*Password, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", passwordRows, m.table)
	var resp Password
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultPasswordModel) Insert(ctx context.Context, data *Password) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?)", m.table, passwordRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.UserId, data.PasswordHash, data.DeleteAt)
	return ret, err
}

func (m *defaultPasswordModel) Update(ctx context.Context, data *Password) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, passwordRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.UserId, data.PasswordHash, data.DeleteAt, data.Id)
	return err
}

func (m *defaultPasswordModel) tableName() string {
	return m.table
}
