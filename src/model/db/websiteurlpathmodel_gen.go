// Code generated by goctlwt. DO NOT EDIT.

package db

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/wuntsong-org/go-zero-plus/core/stores/builder"
	"github.com/wuntsong-org/go-zero-plus/core/stores/sqlc"
	"github.com/wuntsong-org/go-zero-plus/core/stores/sqlx"
	"github.com/wuntsong-org/go-zero-plus/core/stringx"
)

var (
	websiteUrlPathFieldNames          = builder.RawFieldNames(&WebsiteUrlPath{})
	websiteUrlPathRows                = strings.Join(websiteUrlPathFieldNames, ",")
	websiteUrlPathRowsExpectAutoSet   = strings.Join(stringx.Remove(websiteUrlPathFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	websiteUrlPathRowsWithPlaceHolder = strings.Join(stringx.Remove(websiteUrlPathFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	websiteUrlPathModel interface {
		Insert(ctx context.Context, data *WebsiteUrlPath) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*WebsiteUrlPath, error)
		FindOneById(ctx context.Context, id int64) (*WebsiteUrlPath, error)
		Update(ctx context.Context, data *WebsiteUrlPath) error
		Delete(ctx context.Context, id int64) error
	}

	defaultWebsiteUrlPathModel struct {
		conn  sqlx.SqlConn
		table string
	}

	WebsiteUrlPath struct {
		Id         int64        `db:"id"`
		Describe   string       `db:"describe"`
		Path       string       `db:"path"`
		Mode       int64        `db:"mode"`
		Status     int64        `db:"status"`
		IsOrPolicy bool         `db:"is_or_policy"`
		Permission string       `db:"permission"`
		Method     int64        `db:"method"`
		CreateAt   time.Time    `db:"create_at"`
		UpdateAt   time.Time    `db:"update_at"`
		DeleteAt   sql.NullTime `db:"delete_at"`
	}
)

func newWebsiteUrlPathModel(conn sqlx.SqlConn) *defaultWebsiteUrlPathModel {
	return &defaultWebsiteUrlPathModel{
		conn:  conn,
		table: "`website_url_path`",
	}
}

func (m *defaultWebsiteUrlPathModel) withSession(session sqlx.Session) *defaultWebsiteUrlPathModel {
	return &defaultWebsiteUrlPathModel{
		conn:  sqlx.NewSqlConnFromSession(session),
		table: "`website_url_path`",
	}
}

func (m *defaultWebsiteUrlPathModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultWebsiteUrlPathModel) FindOne(ctx context.Context, id int64) (*WebsiteUrlPath, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", websiteUrlPathRows, m.table)
	var resp WebsiteUrlPath
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultWebsiteUrlPathModel) FindOneById(ctx context.Context, id int64) (*WebsiteUrlPath, error) {
	var resp WebsiteUrlPath
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", websiteUrlPathRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultWebsiteUrlPathModel) Insert(ctx context.Context, data *WebsiteUrlPath) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?)", m.table, websiteUrlPathRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Describe, data.Path, data.Mode, data.Status, data.IsOrPolicy, data.Permission, data.Method, data.DeleteAt)
	return ret, err
}

func (m *defaultWebsiteUrlPathModel) Update(ctx context.Context, newData *WebsiteUrlPath) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, websiteUrlPathRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, newData.Describe, newData.Path, newData.Mode, newData.Status, newData.IsOrPolicy, newData.Permission, newData.Method, newData.DeleteAt, newData.Id)
	return err
}

func (m *defaultWebsiteUrlPathModel) tableName() string {
	return m.table
}
