// Code generated by goctlwt. DO NOT EDIT.

package db

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/wuntsong-org/go-zero-plus/core/stores/builder"
	"github.com/wuntsong-org/go-zero-plus/core/stores/sqlc"
	"github.com/wuntsong-org/go-zero-plus/core/stores/sqlx"
	"github.com/wuntsong-org/go-zero-plus/core/stringx"
)

var (
	accessRecordFieldNames          = builder.RawFieldNames(&AccessRecord{})
	accessRecordRows                = strings.Join(accessRecordFieldNames, ",")
	accessRecordRowsExpectAutoSet   = strings.Join(stringx.Remove(accessRecordFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	accessRecordRowsWithPlaceHolder = strings.Join(stringx.Remove(accessRecordFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	accessRecordModel interface {
		Insert(ctx context.Context, data *AccessRecord) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*AccessRecord, error)
		Update(ctx context.Context, data *AccessRecord) error
		Delete(ctx context.Context, id int64) error
	}

	defaultAccessRecordModel struct {
		conn  sqlx.SqlConn
		table string
	}

	AccessRecord struct {
		Id                int64          `db:"id"`
		RequestIdPrefix   string         `db:"request_id_prefix"`
		ServerName        string         `db:"server_name"`
		UserId            sql.NullInt64  `db:"user_id"`
		UserUid           sql.NullString `db:"user_uid"`
		UserToken         sql.NullString `db:"user_token"`
		RoleId            sql.NullInt64  `db:"role_id"`
		RoleName          sql.NullString `db:"role_name"`
		RoleSign          sql.NullString `db:"role_sign"`
		WebId             sql.NullInt64  `db:"web_id"`
		WebName           sql.NullString `db:"web_name"`
		RequestsWebId     sql.NullInt64  `db:"requests_web_id"`
		RequestsWebName   sql.NullString `db:"requests_web_name"`
		Ip                string         `db:"ip"`
		GeoCode           string         `db:"geo_code"`
		Geo               string         `db:"geo"`
		Scheme            string         `db:"scheme"`
		Method            string         `db:"method"`
		Host              string         `db:"host"`
		Path              string         `db:"path"`
		Query             string         `db:"query"`
		ContentType       string         `db:"content_type"`
		RequestsBody      string         `db:"requests_body"`
		ResponseBody      sql.NullString `db:"response_body"`
		ResponseBodyError sql.NullString `db:"response_body_error"`
		RequestsHeader    string         `db:"requests_header"`
		ResponseHeader    sql.NullString `db:"response_header"`
		StatusCode        sql.NullInt64  `db:"status_code"`
		PanicError        sql.NullString `db:"panic_error"`
		Message           sql.NullString `db:"message"`
		UseTime           sql.NullInt64  `db:"use_time"`
		CreateAt          time.Time      `db:"create_at"`
		StartAt           sql.NullTime   `db:"start_at"`
		EndAt             sql.NullTime   `db:"end_at"`
	}
)

func newAccessRecordModel(conn sqlx.SqlConn) *defaultAccessRecordModel {
	return &defaultAccessRecordModel{
		conn:  conn,
		table: "`access_record`",
	}
}

func (m *defaultAccessRecordModel) withSession(session sqlx.Session) *defaultAccessRecordModel {
	return &defaultAccessRecordModel{
		conn:  sqlx.NewSqlConnFromSession(session),
		table: "`access_record`",
	}
}

func (m *defaultAccessRecordModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultAccessRecordModel) FindOne(ctx context.Context, id int64) (*AccessRecord, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", accessRecordRows, m.table)
	var resp AccessRecord
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultAccessRecordModel) Insert(ctx context.Context, data *AccessRecord) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, accessRecordRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.RequestIdPrefix, data.ServerName, data.UserId, data.UserUid, data.UserToken, data.RoleId, data.RoleName, data.RoleSign, data.WebId, data.WebName, data.RequestsWebId, data.RequestsWebName, data.Ip, data.GeoCode, data.Geo, data.Scheme, data.Method, data.Host, data.Path, data.Query, data.ContentType, data.RequestsBody, data.ResponseBody, data.ResponseBodyError, data.RequestsHeader, data.ResponseHeader, data.StatusCode, data.PanicError, data.Message, data.UseTime, data.StartAt, data.EndAt)
	return ret, err
}

func (m *defaultAccessRecordModel) Update(ctx context.Context, data *AccessRecord) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, accessRecordRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.RequestIdPrefix, data.ServerName, data.UserId, data.UserUid, data.UserToken, data.RoleId, data.RoleName, data.RoleSign, data.WebId, data.WebName, data.RequestsWebId, data.RequestsWebName, data.Ip, data.GeoCode, data.Geo, data.Scheme, data.Method, data.Host, data.Path, data.Query, data.ContentType, data.RequestsBody, data.ResponseBody, data.ResponseBodyError, data.RequestsHeader, data.ResponseHeader, data.StatusCode, data.PanicError, data.Message, data.UseTime, data.StartAt, data.EndAt, data.Id)
	return err
}

func (m *defaultAccessRecordModel) tableName() string {
	return m.table
}
