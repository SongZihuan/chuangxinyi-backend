// Code generated by goctlwt. DO NOT EDIT.

package db

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/wuntsong-org/go-zero-plus/core/stores/builder"
	"github.com/wuntsong-org/go-zero-plus/core/stores/sqlc"
	"github.com/wuntsong-org/go-zero-plus/core/stores/sqlx"
	"github.com/wuntsong-org/go-zero-plus/core/stringx"
)

var (
	defrayFieldNames          = builder.RawFieldNames(&Defray{})
	defrayRows                = strings.Join(defrayFieldNames, ",")
	defrayRowsExpectAutoSet   = strings.Join(stringx.Remove(defrayFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	defrayRowsWithPlaceHolder = strings.Join(stringx.Remove(defrayFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	defrayModel interface {
		Insert(ctx context.Context, data *Defray) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Defray, error)
		Update(ctx context.Context, data *Defray) error
		Delete(ctx context.Context, id int64) error
	}

	defaultDefrayModel struct {
		conn  sqlx.SqlConn
		table string
	}

	Defray struct {
		Id                 int64          `db:"id"`
		WalletId           sql.NullInt64  `db:"wallet_id"`
		UserId             sql.NullInt64  `db:"user_id"`
		OwnerId            sql.NullInt64  `db:"owner_id"`
		DefrayId           string         `db:"defray_id"`
		Subject            string         `db:"subject"`
		Price              int64          `db:"price"`
		CouponsId          sql.NullInt64  `db:"coupons_id"`
		UnitPrice          int64          `db:"unit_price"`
		Quantity           int64          `db:"quantity"`
		Describe           string         `db:"describe"`
		SupplierId         int64          `db:"supplier_id"`
		Supplier           string         `db:"supplier"`
		ReturnUrl          string         `db:"return_url"`
		RealPrice          sql.NullInt64  `db:"real_price"`
		Balance            sql.NullInt64  `db:"balance"`
		InvitePre          int64          `db:"invite_pre"`
		DistributionLevel1 int64          `db:"distribution_level_1"`
		DistributionLevel2 int64          `db:"distribution_level_2"`
		DistributionLevel3 int64          `db:"distribution_level_3"`
		HasDistribution    bool           `db:"has_distribution"`
		CanWithdraw        bool           `db:"can_withdraw"`
		Remark             string         `db:"remark"`
		MustSelfDefray     bool           `db:"must_self_defray"`
		ReturnReason       sql.NullString `db:"return_reason"`
		Status             int64          `db:"status"`
		ReturnDayLimit     int64          `db:"return_day_limit"`
		CreateAt           time.Time      `db:"create_at"`
		DefrayAt           sql.NullTime   `db:"defray_at"`
		LastReturnAt       sql.NullTime   `db:"last_return_at"`
		ReturnAt           sql.NullTime   `db:"return_at"`
		DeleteAt           sql.NullTime   `db:"delete_at"`
	}
)

func newDefrayModel(conn sqlx.SqlConn) *defaultDefrayModel {
	return &defaultDefrayModel{
		conn:  conn,
		table: "`defray`",
	}
}

func (m *defaultDefrayModel) withSession(session sqlx.Session) *defaultDefrayModel {
	return &defaultDefrayModel{
		conn:  sqlx.NewSqlConnFromSession(session),
		table: "`defray`",
	}
}

func (m *defaultDefrayModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultDefrayModel) FindOne(ctx context.Context, id int64) (*Defray, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", defrayRows, m.table)
	var resp Defray
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultDefrayModel) Insert(ctx context.Context, data *Defray) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, defrayRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.WalletId, data.UserId, data.OwnerId, data.DefrayId, data.Subject, data.Price, data.CouponsId, data.UnitPrice, data.Quantity, data.Describe, data.SupplierId, data.Supplier, data.ReturnUrl, data.RealPrice, data.Balance, data.InvitePre, data.DistributionLevel1, data.DistributionLevel2, data.DistributionLevel3, data.HasDistribution, data.CanWithdraw, data.Remark, data.MustSelfDefray, data.ReturnReason, data.Status, data.ReturnDayLimit, data.DefrayAt, data.LastReturnAt, data.ReturnAt, data.DeleteAt)
	return ret, err
}

func (m *defaultDefrayModel) Update(ctx context.Context, data *Defray) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, defrayRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.WalletId, data.UserId, data.OwnerId, data.DefrayId, data.Subject, data.Price, data.CouponsId, data.UnitPrice, data.Quantity, data.Describe, data.SupplierId, data.Supplier, data.ReturnUrl, data.RealPrice, data.Balance, data.InvitePre, data.DistributionLevel1, data.DistributionLevel2, data.DistributionLevel3, data.HasDistribution, data.CanWithdraw, data.Remark, data.MustSelfDefray, data.ReturnReason, data.Status, data.ReturnDayLimit, data.DefrayAt, data.LastReturnAt, data.ReturnAt, data.DeleteAt, data.Id)
	return err
}

func (m *defaultDefrayModel) tableName() string {
	return m.table
}
