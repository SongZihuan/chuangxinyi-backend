// Code generated by goctlwt. DO NOT EDIT.

package db

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/wuntsong-org/go-zero-plus/core/stores/builder"
	"github.com/wuntsong-org/go-zero-plus/core/stores/sqlc"
	"github.com/wuntsong-org/go-zero-plus/core/stores/sqlx"
	"github.com/wuntsong-org/go-zero-plus/core/stringx"
)

var (
	oauth2BanedFieldNames          = builder.RawFieldNames(&Oauth2Baned{})
	oauth2BanedRows                = strings.Join(oauth2BanedFieldNames, ",")
	oauth2BanedRowsExpectAutoSet   = strings.Join(stringx.Remove(oauth2BanedFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	oauth2BanedRowsWithPlaceHolder = strings.Join(stringx.Remove(oauth2BanedFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	oauth2BanedModel interface {
		Insert(ctx context.Context, data *Oauth2Baned) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Oauth2Baned, error)
		Update(ctx context.Context, data *Oauth2Baned) error
		Delete(ctx context.Context, id int64) error
	}

	defaultOauth2BanedModel struct {
		conn  sqlx.SqlConn
		table string
	}

	Oauth2Baned struct {
		Id          int64        `db:"id"`
		UserId      int64        `db:"user_id"`
		WebId       int64        `db:"web_id"`
		AllowLogin  bool         `db:"allow_login"`
		AllowDefray bool         `db:"allow_defray"`
		AllowMsg    bool         `db:"allow_msg"`
		CreateAt    time.Time    `db:"create_at"`
		DeleteAt    sql.NullTime `db:"delete_at"`
	}
)

func newOauth2BanedModel(conn sqlx.SqlConn) *defaultOauth2BanedModel {
	return &defaultOauth2BanedModel{
		conn:  conn,
		table: "`oauth2_baned`",
	}
}

func (m *defaultOauth2BanedModel) withSession(session sqlx.Session) *defaultOauth2BanedModel {
	return &defaultOauth2BanedModel{
		conn:  sqlx.NewSqlConnFromSession(session),
		table: "`oauth2_baned`",
	}
}

func (m *defaultOauth2BanedModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultOauth2BanedModel) FindOne(ctx context.Context, id int64) (*Oauth2Baned, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", oauth2BanedRows, m.table)
	var resp Oauth2Baned
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultOauth2BanedModel) Insert(ctx context.Context, data *Oauth2Baned) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?)", m.table, oauth2BanedRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.UserId, data.WebId, data.AllowLogin, data.AllowDefray, data.AllowMsg, data.DeleteAt)
	return ret, err
}

func (m *defaultOauth2BanedModel) Update(ctx context.Context, data *Oauth2Baned) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, oauth2BanedRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.UserId, data.WebId, data.AllowLogin, data.AllowDefray, data.AllowMsg, data.DeleteAt, data.Id)
	return err
}

func (m *defaultOauth2BanedModel) tableName() string {
	return m.table
}
