// Code generated by goctlwt. DO NOT EDIT.

package db

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/wuntsong-org/go-zero-plus/core/stores/builder"
	"github.com/wuntsong-org/go-zero-plus/core/stores/sqlc"
	"github.com/wuntsong-org/go-zero-plus/core/stores/sqlx"
	"github.com/wuntsong-org/go-zero-plus/core/stringx"
)

var (
	policyFieldNames          = builder.RawFieldNames(&Policy{})
	policyRows                = strings.Join(policyFieldNames, ",")
	policyRowsExpectAutoSet   = strings.Join(stringx.Remove(policyFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	policyRowsWithPlaceHolder = strings.Join(stringx.Remove(policyFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	policyModel interface {
		Insert(ctx context.Context, data *Policy) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Policy, error)
		FindOneById(ctx context.Context, id int64) (*Policy, error)
		Update(ctx context.Context, data *Policy) error
		Delete(ctx context.Context, id int64) error
	}

	defaultPolicyModel struct {
		conn  sqlx.SqlConn
		table string
	}

	Policy struct {
		Id          int64        `db:"id"`
		Name        string       `db:"name"`
		Sign        string       `db:"sign"`
		Describe    string       `db:"describe"`
		Sort        int64        `db:"sort"`
		IsAnonymous bool         `db:"is_anonymous"`
		IsUser      bool         `db:"is_user"`
		Status      int64        `db:"status"`
		CreateAt    time.Time    `db:"create_at"`
		UpdateAt    time.Time    `db:"update_at"`
		DeleteAt    sql.NullTime `db:"delete_at"`
	}
)

func newPolicyModel(conn sqlx.SqlConn) *defaultPolicyModel {
	return &defaultPolicyModel{
		conn:  conn,
		table: "`policy`",
	}
}

func (m *defaultPolicyModel) withSession(session sqlx.Session) *defaultPolicyModel {
	return &defaultPolicyModel{
		conn:  sqlx.NewSqlConnFromSession(session),
		table: "`policy`",
	}
}

func (m *defaultPolicyModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultPolicyModel) FindOne(ctx context.Context, id int64) (*Policy, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", policyRows, m.table)
	var resp Policy
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultPolicyModel) FindOneById(ctx context.Context, id int64) (*Policy, error) {
	var resp Policy
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", policyRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultPolicyModel) Insert(ctx context.Context, data *Policy) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?)", m.table, policyRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Name, data.Sign, data.Describe, data.Sort, data.IsAnonymous, data.IsUser, data.Status, data.DeleteAt)
	return ret, err
}

func (m *defaultPolicyModel) Update(ctx context.Context, newData *Policy) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, policyRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, newData.Name, newData.Sign, newData.Describe, newData.Sort, newData.IsAnonymous, newData.IsUser, newData.Status, newData.DeleteAt, newData.Id)
	return err
}

func (m *defaultPolicyModel) tableName() string {
	return m.table
}
