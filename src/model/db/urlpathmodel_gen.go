// Code generated by goctlwt. DO NOT EDIT.

package db

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/wuntsong-org/go-zero-plus/core/stores/builder"
	"github.com/wuntsong-org/go-zero-plus/core/stores/sqlc"
	"github.com/wuntsong-org/go-zero-plus/core/stores/sqlx"
	"github.com/wuntsong-org/go-zero-plus/core/stringx"
)

var (
	urlPathFieldNames          = builder.RawFieldNames(&UrlPath{})
	urlPathRows                = strings.Join(urlPathFieldNames, ",")
	urlPathRowsExpectAutoSet   = strings.Join(stringx.Remove(urlPathFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	urlPathRowsWithPlaceHolder = strings.Join(stringx.Remove(urlPathFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	urlPathModel interface {
		Insert(ctx context.Context, data *UrlPath) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*UrlPath, error)
		FindOneById(ctx context.Context, id int64) (*UrlPath, error)
		Update(ctx context.Context, data *UrlPath) error
		Delete(ctx context.Context, id int64) error
	}

	defaultUrlPathModel struct {
		conn  sqlx.SqlConn
		table string
	}

	UrlPath struct {
		Id             int64        `db:"id"`
		Describe       string       `db:"describe"`
		Path           string       `db:"path"`
		Mode           int64        `db:"mode"`
		Authentication bool         `db:"authentication"`
		DoubleCheck    bool         `db:"double_check"`
		CorsMode       int64        `db:"cors_mode"`
		AdminMode      int64        `db:"admin_mode"`
		BusyMode       int64        `db:"busy_mode"`
		BusyCount      int64        `db:"busy_count"`
		CaptchaMode    int64        `db:"captcha_mode"`
		Status         int64        `db:"status"`
		IsOrPolicy     bool         `db:"is_or_policy"`
		Permission     string       `db:"permission"`
		SubPolicy      int64        `db:"sub_policy"`
		Method         int64        `db:"method"`
		CreateAt       time.Time    `db:"create_at"`
		UpdateAt       time.Time    `db:"update_at"`
		DeleteAt       sql.NullTime `db:"delete_at"`
	}
)

func newUrlPathModel(conn sqlx.SqlConn) *defaultUrlPathModel {
	return &defaultUrlPathModel{
		conn:  conn,
		table: "`url_path`",
	}
}

func (m *defaultUrlPathModel) withSession(session sqlx.Session) *defaultUrlPathModel {
	return &defaultUrlPathModel{
		conn:  sqlx.NewSqlConnFromSession(session),
		table: "`url_path`",
	}
}

func (m *defaultUrlPathModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultUrlPathModel) FindOne(ctx context.Context, id int64) (*UrlPath, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", urlPathRows, m.table)
	var resp UrlPath
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUrlPathModel) FindOneById(ctx context.Context, id int64) (*UrlPath, error) {
	var resp UrlPath
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", urlPathRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUrlPathModel) Insert(ctx context.Context, data *UrlPath) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, urlPathRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Describe, data.Path, data.Mode, data.Authentication, data.DoubleCheck, data.CorsMode, data.AdminMode, data.BusyMode, data.BusyCount, data.CaptchaMode, data.Status, data.IsOrPolicy, data.Permission, data.SubPolicy, data.Method, data.DeleteAt)
	return ret, err
}

func (m *defaultUrlPathModel) Update(ctx context.Context, newData *UrlPath) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, urlPathRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, newData.Describe, newData.Path, newData.Mode, newData.Authentication, newData.DoubleCheck, newData.CorsMode, newData.AdminMode, newData.BusyMode, newData.BusyCount, newData.CaptchaMode, newData.Status, newData.IsOrPolicy, newData.Permission, newData.SubPolicy, newData.Method, newData.DeleteAt, newData.Id)
	return err
}

func (m *defaultUrlPathModel) tableName() string {
	return m.table
}
