// Code generated by goctlwt. DO NOT EDIT.

package db

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/wuntsong-org/go-zero-plus/core/stores/builder"
	"github.com/wuntsong-org/go-zero-plus/core/stores/sqlc"
	"github.com/wuntsong-org/go-zero-plus/core/stores/sqlx"
	"github.com/wuntsong-org/go-zero-plus/core/stringx"
)

var (
	websiteFieldNames          = builder.RawFieldNames(&Website{})
	websiteRows                = strings.Join(websiteFieldNames, ",")
	websiteRowsExpectAutoSet   = strings.Join(stringx.Remove(websiteFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	websiteRowsWithPlaceHolder = strings.Join(stringx.Remove(websiteFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	websiteModel interface {
		Insert(ctx context.Context, data *Website) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Website, error)
		Update(ctx context.Context, data *Website) error
		Delete(ctx context.Context, id int64) error
	}

	defaultWebsiteModel struct {
		conn  sqlx.SqlConn
		table string
	}

	Website struct {
		Id         int64        `db:"id"`
		Uid        string       `db:"uid"`
		Name       string       `db:"name"`
		Pubkey     string       `db:"pubkey"`
		Describe   string       `db:"describe"`
		Keymap     string       `db:"keymap"`
		Agreement  string       `db:"agreement"`
		Permission string       `db:"permission"`
		Status     int64        `db:"status"`
		CreateAt   time.Time    `db:"create_at"`
		UpdateAt   time.Time    `db:"update_at"`
		DeleteAt   sql.NullTime `db:"delete_at"`
	}
)

func newWebsiteModel(conn sqlx.SqlConn) *defaultWebsiteModel {
	return &defaultWebsiteModel{
		conn:  conn,
		table: "`website`",
	}
}

func (m *defaultWebsiteModel) withSession(session sqlx.Session) *defaultWebsiteModel {
	return &defaultWebsiteModel{
		conn:  sqlx.NewSqlConnFromSession(session),
		table: "`website`",
	}
}

func (m *defaultWebsiteModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultWebsiteModel) FindOne(ctx context.Context, id int64) (*Website, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", websiteRows, m.table)
	var resp Website
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultWebsiteModel) Insert(ctx context.Context, data *Website) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, websiteRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Uid, data.Name, data.Pubkey, data.Describe, data.Keymap, data.Agreement, data.Permission, data.Status, data.DeleteAt)
	return ret, err
}

func (m *defaultWebsiteModel) Update(ctx context.Context, data *Website) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, websiteRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.Uid, data.Name, data.Pubkey, data.Describe, data.Keymap, data.Agreement, data.Permission, data.Status, data.DeleteAt, data.Id)
	return err
}

func (m *defaultWebsiteModel) tableName() string {
	return m.table
}
