// Code generated by goctlwt. DO NOT EDIT.

package db

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/wuntsong-org/go-zero-plus/core/stores/builder"
	"github.com/wuntsong-org/go-zero-plus/core/stores/sqlc"
	"github.com/wuntsong-org/go-zero-plus/core/stores/sqlx"
	"github.com/wuntsong-org/go-zero-plus/core/stringx"
)

var (
	emailMessageFieldNames          = builder.RawFieldNames(&EmailMessage{})
	emailMessageRows                = strings.Join(emailMessageFieldNames, ",")
	emailMessageRowsExpectAutoSet   = strings.Join(stringx.Remove(emailMessageFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	emailMessageRowsWithPlaceHolder = strings.Join(stringx.Remove(emailMessageFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	emailMessageModel interface {
		Insert(ctx context.Context, data *EmailMessage) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*EmailMessage, error)
		Update(ctx context.Context, data *EmailMessage) error
		Delete(ctx context.Context, id int64) error
	}

	defaultEmailMessageModel struct {
		conn  sqlx.SqlConn
		table string
	}

	EmailMessage struct {
		Id       int64          `db:"id"`
		Email    string         `db:"email"`
		Subject  string         `db:"subject"`
		Content  string         `db:"content"`
		Sender   string         `db:"sender"`
		SenderId int64          `db:"sender_id"`
		Success  bool           `db:"success"`
		ErrorMsg sql.NullString `db:"error_msg"`
		CreateAt time.Time      `db:"create_at"`
		DeleteAt sql.NullTime   `db:"delete_at"`
	}
)

func newEmailMessageModel(conn sqlx.SqlConn) *defaultEmailMessageModel {
	return &defaultEmailMessageModel{
		conn:  conn,
		table: "`email_message`",
	}
}

func (m *defaultEmailMessageModel) withSession(session sqlx.Session) *defaultEmailMessageModel {
	return &defaultEmailMessageModel{
		conn:  sqlx.NewSqlConnFromSession(session),
		table: "`email_message`",
	}
}

func (m *defaultEmailMessageModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultEmailMessageModel) FindOne(ctx context.Context, id int64) (*EmailMessage, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", emailMessageRows, m.table)
	var resp EmailMessage
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultEmailMessageModel) Insert(ctx context.Context, data *EmailMessage) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?)", m.table, emailMessageRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Email, data.Subject, data.Content, data.Sender, data.SenderId, data.Success, data.ErrorMsg, data.DeleteAt)
	return ret, err
}

func (m *defaultEmailMessageModel) Update(ctx context.Context, data *EmailMessage) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, emailMessageRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.Email, data.Subject, data.Content, data.Sender, data.SenderId, data.Success, data.ErrorMsg, data.DeleteAt, data.Id)
	return err
}

func (m *defaultEmailMessageModel) tableName() string {
	return m.table
}
