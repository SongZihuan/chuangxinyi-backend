// Code generated by goctlwt. DO NOT EDIT.

package db

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/wuntsong-org/go-zero-plus/core/stores/builder"
	"github.com/wuntsong-org/go-zero-plus/core/stores/sqlc"
	"github.com/wuntsong-org/go-zero-plus/core/stores/sqlx"
	"github.com/wuntsong-org/go-zero-plus/core/stringx"
)

var (
	couponsFieldNames          = builder.RawFieldNames(&Coupons{})
	couponsRows                = strings.Join(couponsFieldNames, ",")
	couponsRowsExpectAutoSet   = strings.Join(stringx.Remove(couponsFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	couponsRowsWithPlaceHolder = strings.Join(stringx.Remove(couponsFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	couponsModel interface {
		Insert(ctx context.Context, data *Coupons) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Coupons, error)
		Update(ctx context.Context, data *Coupons) error
		Delete(ctx context.Context, id int64) error
	}

	defaultCouponsModel struct {
		conn  sqlx.SqlConn
		table string
	}

	Coupons struct {
		Id       int64        `db:"id"`
		UserId   int64        `db:"user_id"`
		Type     int64        `db:"type"`
		Name     string       `db:"name"`
		Content  string       `db:"content"`
		CreateAt time.Time    `db:"create_at"`
		DeleteAt sql.NullTime `db:"delete_at"`
	}
)

func newCouponsModel(conn sqlx.SqlConn) *defaultCouponsModel {
	return &defaultCouponsModel{
		conn:  conn,
		table: "`coupons`",
	}
}

func (m *defaultCouponsModel) withSession(session sqlx.Session) *defaultCouponsModel {
	return &defaultCouponsModel{
		conn:  sqlx.NewSqlConnFromSession(session),
		table: "`coupons`",
	}
}

func (m *defaultCouponsModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultCouponsModel) FindOne(ctx context.Context, id int64) (*Coupons, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", couponsRows, m.table)
	var resp Coupons
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultCouponsModel) Insert(ctx context.Context, data *Coupons) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?)", m.table, couponsRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.UserId, data.Type, data.Name, data.Content, data.DeleteAt)
	return ret, err
}

func (m *defaultCouponsModel) Update(ctx context.Context, data *Coupons) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, couponsRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.UserId, data.Type, data.Name, data.Content, data.DeleteAt, data.Id)
	return err
}

func (m *defaultCouponsModel) tableName() string {
	return m.table
}
