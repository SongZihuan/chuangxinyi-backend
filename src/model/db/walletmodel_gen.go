// Code generated by goctlwt. DO NOT EDIT.

package db

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/wuntsong-org/go-zero-plus/core/stores/builder"
	"github.com/wuntsong-org/go-zero-plus/core/stores/sqlc"
	"github.com/wuntsong-org/go-zero-plus/core/stores/sqlx"
	"github.com/wuntsong-org/go-zero-plus/core/stringx"
)

var (
	walletFieldNames          = builder.RawFieldNames(&Wallet{})
	walletRows                = strings.Join(walletFieldNames, ",")
	walletRowsExpectAutoSet   = strings.Join(stringx.Remove(walletFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	walletRowsWithPlaceHolder = strings.Join(stringx.Remove(walletFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	walletModel interface {
		Insert(ctx context.Context, data *Wallet) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Wallet, error)
		Update(ctx context.Context, data *Wallet) error
		Delete(ctx context.Context, id int64) error
	}

	defaultWalletModel struct {
		conn  sqlx.SqlConn
		table string
	}

	Wallet struct {
		Id           int64        `db:"id"`
		Balance      int64        `db:"balance"`
		WaitBalance  int64        `db:"wait_balance"`
		Cny          int64        `db:"cny"`
		NotBilled    int64        `db:"not_billed"`
		Billed       int64        `db:"billed"`
		HasBilled    int64        `db:"has_billed"`
		Withdraw     int64        `db:"withdraw"`
		WaitWithdraw int64        `db:"wait_withdraw"`
		NotWithdraw  int64        `db:"not_withdraw"`
		HasWithdraw  int64        `db:"has_withdraw"`
		CreateAt     time.Time    `db:"create_at"`
		UpdateAt     time.Time    `db:"update_at"`
		DeleteAt     sql.NullTime `db:"delete_at"`
	}
)

func newWalletModel(conn sqlx.SqlConn) *defaultWalletModel {
	return &defaultWalletModel{
		conn:  conn,
		table: "`wallet`",
	}
}

func (m *defaultWalletModel) withSession(session sqlx.Session) *defaultWalletModel {
	return &defaultWalletModel{
		conn:  sqlx.NewSqlConnFromSession(session),
		table: "`wallet`",
	}
}

func (m *defaultWalletModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultWalletModel) FindOne(ctx context.Context, id int64) (*Wallet, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", walletRows, m.table)
	var resp Wallet
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultWalletModel) Insert(ctx context.Context, data *Wallet) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, walletRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Balance, data.WaitBalance, data.Cny, data.NotBilled, data.Billed, data.HasBilled, data.Withdraw, data.WaitWithdraw, data.NotWithdraw, data.HasWithdraw, data.DeleteAt)
	return ret, err
}

func (m *defaultWalletModel) Update(ctx context.Context, data *Wallet) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, walletRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.Balance, data.WaitBalance, data.Cny, data.NotBilled, data.Billed, data.HasBilled, data.Withdraw, data.WaitWithdraw, data.NotWithdraw, data.HasWithdraw, data.DeleteAt, data.Id)
	return err
}

func (m *defaultWalletModel) tableName() string {
	return m.table
}
