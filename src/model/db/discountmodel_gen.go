// Code generated by goctlwt. DO NOT EDIT.

package db

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/wuntsong-org/go-zero-plus/core/stores/builder"
	"github.com/wuntsong-org/go-zero-plus/core/stores/sqlc"
	"github.com/wuntsong-org/go-zero-plus/core/stores/sqlx"
	"github.com/wuntsong-org/go-zero-plus/core/stringx"
)

var (
	discountFieldNames          = builder.RawFieldNames(&Discount{})
	discountRows                = strings.Join(discountFieldNames, ",")
	discountRowsExpectAutoSet   = strings.Join(stringx.Remove(discountFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	discountRowsWithPlaceHolder = strings.Join(stringx.Remove(discountFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	discountModel interface {
		Insert(ctx context.Context, data *Discount) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Discount, error)
		Update(ctx context.Context, data *Discount) error
		Delete(ctx context.Context, id int64) error
	}

	defaultDiscountModel struct {
		conn  sqlx.SqlConn
		table string
	}

	Discount struct {
		Id                int64         `db:"id"`
		Name              string        `db:"name"`
		Describe          string        `db:"describe"`
		ShortDescribe     string        `db:"short_describe"`
		Type              int64         `db:"type"`
		Quota             string        `db:"quota"`
		DayLimit          sql.NullInt64 `db:"day_limit"`
		MonthLimit        sql.NullInt64 `db:"month_limit"`
		YearLimit         sql.NullInt64 `db:"year_limit"`
		Limit             sql.NullInt64 `db:"limit"`
		NeedVerify        bool          `db:"need_verify"`
		NeedCompany       bool          `db:"need_company"`
		NeedUserOrigin    bool          `db:"need_user_origin"`
		NeedCompanyOrigin bool          `db:"need_company_origin"`
		NeedUserFace      bool          `db:"need_user_face"`
		NeedCompanyFace   bool          `db:"need_company_face"`
		Show              bool          `db:"show"`
		Remark            string        `db:"remark"`
		CreateAt          time.Time     `db:"create_at"`
		UpdateAt          time.Time     `db:"update_at"`
		DeleteAt          sql.NullTime  `db:"delete_at"`
	}
)

func newDiscountModel(conn sqlx.SqlConn) *defaultDiscountModel {
	return &defaultDiscountModel{
		conn:  conn,
		table: "`discount`",
	}
}

func (m *defaultDiscountModel) withSession(session sqlx.Session) *defaultDiscountModel {
	return &defaultDiscountModel{
		conn:  sqlx.NewSqlConnFromSession(session),
		table: "`discount`",
	}
}

func (m *defaultDiscountModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultDiscountModel) FindOne(ctx context.Context, id int64) (*Discount, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", discountRows, m.table)
	var resp Discount
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultDiscountModel) Insert(ctx context.Context, data *Discount) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, discountRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Name, data.Describe, data.ShortDescribe, data.Type, data.Quota, data.DayLimit, data.MonthLimit, data.YearLimit, data.Limit, data.NeedVerify, data.NeedCompany, data.NeedUserOrigin, data.NeedCompanyOrigin, data.NeedUserFace, data.NeedCompanyFace, data.Show, data.Remark, data.DeleteAt)
	return ret, err
}

func (m *defaultDiscountModel) Update(ctx context.Context, data *Discount) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, discountRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.Name, data.Describe, data.ShortDescribe, data.Type, data.Quota, data.DayLimit, data.MonthLimit, data.YearLimit, data.Limit, data.NeedVerify, data.NeedCompany, data.NeedUserOrigin, data.NeedCompanyOrigin, data.NeedUserFace, data.NeedCompanyFace, data.Show, data.Remark, data.DeleteAt, data.Id)
	return err
}

func (m *defaultDiscountModel) tableName() string {
	return m.table
}
