// Code generated by goctlwt. DO NOT EDIT.

package db

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/wuntsong-org/go-zero-plus/core/stores/builder"
	"github.com/wuntsong-org/go-zero-plus/core/stores/sqlc"
	"github.com/wuntsong-org/go-zero-plus/core/stores/sqlx"
	"github.com/wuntsong-org/go-zero-plus/core/stringx"
)

var (
	menuFieldNames          = builder.RawFieldNames(&Menu{})
	menuRows                = strings.Join(menuFieldNames, ",")
	menuRowsExpectAutoSet   = strings.Join(stringx.Remove(menuFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	menuRowsWithPlaceHolder = strings.Join(stringx.Remove(menuFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	menuModel interface {
		Insert(ctx context.Context, data *Menu) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Menu, error)
		FindOneById(ctx context.Context, id int64) (*Menu, error)
		Update(ctx context.Context, data *Menu) error
		Delete(ctx context.Context, id int64) error
	}

	defaultMenuModel struct {
		conn  sqlx.SqlConn
		table string
	}

	Menu struct {
		Id             int64          `db:"id"`
		Sort           int64          `db:"sort"`
		Describe       string         `db:"describe"`
		FatherId       sql.NullInt64  `db:"father_id"`
		Name           string         `db:"name"`
		Path           string         `db:"path"`
		Title          string         `db:"title"`
		Icon           string         `db:"icon"`
		Redirect       sql.NullString `db:"redirect"`
		Superior       string         `db:"superior"`
		Category       int64          `db:"category"`
		Component      string         `db:"component"`
		ComponentAlias string         `db:"component_alias"`
		MetaLink       sql.NullString `db:"meta_link"`
		Type           int64          `db:"type"`
		IsLink         bool           `db:"is_link"`
		IsHide         bool           `db:"is_hide"`
		IsKeepalive    bool           `db:"is_keepalive"`
		IsAffix        bool           `db:"is_affix"`
		IsIframe       bool           `db:"is_iframe"`
		BtnPower       string         `db:"btn_power"`
		IsOrPolicy     bool           `db:"is_or_policy"`
		Status         int64          `db:"status"`
		Policy         string         `db:"policy"`
		SubPolicy      int64          `db:"sub_policy"`
		CreateAt       time.Time      `db:"create_at"`
		UpdateAt       time.Time      `db:"update_at"`
		DeleteAt       sql.NullTime   `db:"delete_at"`
	}
)

func newMenuModel(conn sqlx.SqlConn) *defaultMenuModel {
	return &defaultMenuModel{
		conn:  conn,
		table: "`menu`",
	}
}

func (m *defaultMenuModel) withSession(session sqlx.Session) *defaultMenuModel {
	return &defaultMenuModel{
		conn:  sqlx.NewSqlConnFromSession(session),
		table: "`menu`",
	}
}

func (m *defaultMenuModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultMenuModel) FindOne(ctx context.Context, id int64) (*Menu, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", menuRows, m.table)
	var resp Menu
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultMenuModel) FindOneById(ctx context.Context, id int64) (*Menu, error) {
	var resp Menu
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", menuRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultMenuModel) Insert(ctx context.Context, data *Menu) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, menuRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Sort, data.Describe, data.FatherId, data.Name, data.Path, data.Title, data.Icon, data.Redirect, data.Superior, data.Category, data.Component, data.ComponentAlias, data.MetaLink, data.Type, data.IsLink, data.IsHide, data.IsKeepalive, data.IsAffix, data.IsIframe, data.BtnPower, data.IsOrPolicy, data.Status, data.Policy, data.SubPolicy, data.DeleteAt)
	return ret, err
}

func (m *defaultMenuModel) Update(ctx context.Context, newData *Menu) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, menuRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, newData.Sort, newData.Describe, newData.FatherId, newData.Name, newData.Path, newData.Title, newData.Icon, newData.Redirect, newData.Superior, newData.Category, newData.Component, newData.ComponentAlias, newData.MetaLink, newData.Type, newData.IsLink, newData.IsHide, newData.IsKeepalive, newData.IsAffix, newData.IsIframe, newData.BtnPower, newData.IsOrPolicy, newData.Status, newData.Policy, newData.SubPolicy, newData.DeleteAt, newData.Id)
	return err
}

func (m *defaultMenuModel) tableName() string {
	return m.table
}
