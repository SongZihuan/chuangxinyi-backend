// Code generated by goctlwt. DO NOT EDIT.

package db

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/wuntsong-org/go-zero-plus/core/stores/builder"
	"github.com/wuntsong-org/go-zero-plus/core/stores/sqlc"
	"github.com/wuntsong-org/go-zero-plus/core/stores/sqlx"
	"github.com/wuntsong-org/go-zero-plus/core/stringx"
)

var (
	invoiceFieldNames          = builder.RawFieldNames(&Invoice{})
	invoiceRows                = strings.Join(invoiceFieldNames, ",")
	invoiceRowsExpectAutoSet   = strings.Join(stringx.Remove(invoiceFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	invoiceRowsWithPlaceHolder = strings.Join(stringx.Remove(invoiceFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	invoiceModel interface {
		Insert(ctx context.Context, data *Invoice) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Invoice, error)
		Update(ctx context.Context, data *Invoice) error
		Delete(ctx context.Context, id int64) error
	}

	defaultInvoiceModel struct {
		conn  sqlx.SqlConn
		table string
	}

	Invoice struct {
		Id                  int64          `db:"id"`
		WalletId            int64          `db:"wallet_id"`
		UserId              int64          `db:"user_id"`
		InvoiceId           string         `db:"invoice_id"`
		Amount              int64          `db:"amount"`
		Type                int64          `db:"type"`
		Name                sql.NullString `db:"name"`
		TaxId               sql.NullString `db:"tax_id"`
		BankId              sql.NullString `db:"bank_id"`
		Bank                sql.NullString `db:"bank"`
		Recipient           sql.NullString `db:"recipient"`
		Phone               sql.NullString `db:"phone"`
		Email               sql.NullString `db:"email"`
		Country             sql.NullString `db:"country"`
		Province            sql.NullString `db:"province"`
		City                sql.NullString `db:"city"`
		District            sql.NullString `db:"district"`
		Address             sql.NullString `db:"address"`
		InvoiceNumber       sql.NullString `db:"invoice_number"`
		InvoiceCode         sql.NullString `db:"invoice_code"`
		InvoiceCheckCode    sql.NullString `db:"invoice_check_code"`
		IssuerAt            sql.NullTime   `db:"issuer_at"`
		InvoiceKey          sql.NullString `db:"invoice_key"`
		RedInvoiceNumber    sql.NullString `db:"red_invoice_number"`
		RedInvoiceCode      sql.NullString `db:"red_invoice_code"`
		RedInvoiceCheckCode sql.NullString `db:"red_invoice_check_code"`
		RedIssuerAt         sql.NullTime   `db:"red_issuer_at"`
		RedInvoiceKey       sql.NullString `db:"red_invoice_key"`
		Remark              string         `db:"remark"`
		Status              int64          `db:"status"`
		CreateAt            time.Time      `db:"create_at"`
		BillingAt           sql.NullTime   `db:"billing_at"`
		ReturnAt            sql.NullTime   `db:"return_at"`
		DeleteAt            sql.NullTime   `db:"delete_at"`
	}
)

func newInvoiceModel(conn sqlx.SqlConn) *defaultInvoiceModel {
	return &defaultInvoiceModel{
		conn:  conn,
		table: "`invoice`",
	}
}

func (m *defaultInvoiceModel) withSession(session sqlx.Session) *defaultInvoiceModel {
	return &defaultInvoiceModel{
		conn:  sqlx.NewSqlConnFromSession(session),
		table: "`invoice`",
	}
}

func (m *defaultInvoiceModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultInvoiceModel) FindOne(ctx context.Context, id int64) (*Invoice, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", invoiceRows, m.table)
	var resp Invoice
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultInvoiceModel) Insert(ctx context.Context, data *Invoice) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, invoiceRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.WalletId, data.UserId, data.InvoiceId, data.Amount, data.Type, data.Name, data.TaxId, data.BankId, data.Bank, data.Recipient, data.Phone, data.Email, data.Country, data.Province, data.City, data.District, data.Address, data.InvoiceNumber, data.InvoiceCode, data.InvoiceCheckCode, data.IssuerAt, data.InvoiceKey, data.RedInvoiceNumber, data.RedInvoiceCode, data.RedInvoiceCheckCode, data.RedIssuerAt, data.RedInvoiceKey, data.Remark, data.Status, data.BillingAt, data.ReturnAt, data.DeleteAt)
	return ret, err
}

func (m *defaultInvoiceModel) Update(ctx context.Context, data *Invoice) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, invoiceRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.WalletId, data.UserId, data.InvoiceId, data.Amount, data.Type, data.Name, data.TaxId, data.BankId, data.Bank, data.Recipient, data.Phone, data.Email, data.Country, data.Province, data.City, data.District, data.Address, data.InvoiceNumber, data.InvoiceCode, data.InvoiceCheckCode, data.IssuerAt, data.InvoiceKey, data.RedInvoiceNumber, data.RedInvoiceCode, data.RedInvoiceCheckCode, data.RedIssuerAt, data.RedInvoiceKey, data.Remark, data.Status, data.BillingAt, data.ReturnAt, data.DeleteAt, data.Id)
	return err
}

func (m *defaultInvoiceModel) tableName() string {
	return m.table
}
