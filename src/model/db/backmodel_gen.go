// Code generated by goctlwt. DO NOT EDIT.

package db

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/wuntsong-org/go-zero-plus/core/stores/builder"
	"github.com/wuntsong-org/go-zero-plus/core/stores/sqlc"
	"github.com/wuntsong-org/go-zero-plus/core/stores/sqlx"
	"github.com/wuntsong-org/go-zero-plus/core/stringx"
)

var (
	backFieldNames          = builder.RawFieldNames(&Back{})
	backRows                = strings.Join(backFieldNames, ",")
	backRowsExpectAutoSet   = strings.Join(stringx.Remove(backFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	backRowsWithPlaceHolder = strings.Join(stringx.Remove(backFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	backModel interface {
		Insert(ctx context.Context, data *Back) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Back, error)
		Update(ctx context.Context, data *Back) error
		Delete(ctx context.Context, id int64) error
	}

	defaultBackModel struct {
		conn  sqlx.SqlConn
		table string
	}

	Back struct {
		Id          int64        `db:"id"`
		WalletId    int64        `db:"wallet_id"`
		UserId      int64        `db:"user_id"`
		Subject     string       `db:"subject"`
		BackId      string       `db:"back_id"`
		Get         int64        `db:"get"`
		Balance     int64        `db:"balance"`
		CanWithdraw bool         `db:"can_withdraw"`
		SupplierId  int64        `db:"supplier_id"`
		Supplier    string       `db:"supplier"`
		Remark      string       `db:"remark"`
		CreateAt    time.Time    `db:"create_at"`
		DeleteAt    sql.NullTime `db:"delete_at"`
	}
)

func newBackModel(conn sqlx.SqlConn) *defaultBackModel {
	return &defaultBackModel{
		conn:  conn,
		table: "`back`",
	}
}

func (m *defaultBackModel) withSession(session sqlx.Session) *defaultBackModel {
	return &defaultBackModel{
		conn:  sqlx.NewSqlConnFromSession(session),
		table: "`back`",
	}
}

func (m *defaultBackModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultBackModel) FindOne(ctx context.Context, id int64) (*Back, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", backRows, m.table)
	var resp Back
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultBackModel) Insert(ctx context.Context, data *Back) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, backRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.WalletId, data.UserId, data.Subject, data.BackId, data.Get, data.Balance, data.CanWithdraw, data.SupplierId, data.Supplier, data.Remark, data.DeleteAt)
	return ret, err
}

func (m *defaultBackModel) Update(ctx context.Context, data *Back) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, backRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.WalletId, data.UserId, data.Subject, data.BackId, data.Get, data.Balance, data.CanWithdraw, data.SupplierId, data.Supplier, data.Remark, data.DeleteAt, data.Id)
	return err
}

func (m *defaultBackModel) tableName() string {
	return m.table
}
