// Code generated by goctlwt. DO NOT EDIT.
package handler

import (
	"net/http"

	admin_accessrecord "gitee.com/wuntsong-auth/backend/src/service/v1/gen/handler/admin_accessrecord"
	admin_agreement "gitee.com/wuntsong-auth/backend/src/service/v1/gen/handler/admin_agreement"
	admin_announcement "gitee.com/wuntsong-auth/backend/src/service/v1/gen/handler/admin_announcement"
	admin_application "gitee.com/wuntsong-auth/backend/src/service/v1/gen/handler/admin_application"
	admin_menu "gitee.com/wuntsong-auth/backend/src/service/v1/gen/handler/admin_menu"
	admin_path "gitee.com/wuntsong-auth/backend/src/service/v1/gen/handler/admin_path"
	admin_permission "gitee.com/wuntsong-auth/backend/src/service/v1/gen/handler/admin_permission"
	admin_role "gitee.com/wuntsong-auth/backend/src/service/v1/gen/handler/admin_role"
	admin_ui "gitee.com/wuntsong-auth/backend/src/service/v1/gen/handler/admin_ui"
	admin_user "gitee.com/wuntsong-auth/backend/src/service/v1/gen/handler/admin_user"
	admin_website "gitee.com/wuntsong-auth/backend/src/service/v1/gen/handler/admin_website"
	admin_website_path "gitee.com/wuntsong-auth/backend/src/service/v1/gen/handler/admin_website_path"
	admin_website_permission "gitee.com/wuntsong-auth/backend/src/service/v1/gen/handler/admin_website_permission"
	agreement "gitee.com/wuntsong-auth/backend/src/service/v1/gen/handler/agreement"
	application "gitee.com/wuntsong-auth/backend/src/service/v1/gen/handler/application"
	before_check "gitee.com/wuntsong-auth/backend/src/service/v1/gen/handler/before_check"
	center "gitee.com/wuntsong-auth/backend/src/service/v1/gen/handler/center"
	check "gitee.com/wuntsong-auth/backend/src/service/v1/gen/handler/check"
	defray "gitee.com/wuntsong-auth/backend/src/service/v1/gen/handler/defray"
	fuwuhao "gitee.com/wuntsong-auth/backend/src/service/v1/gen/handler/fuwuhao"
	health "gitee.com/wuntsong-auth/backend/src/service/v1/gen/handler/health"
	homepage "gitee.com/wuntsong-auth/backend/src/service/v1/gen/handler/homepage"
	menu "gitee.com/wuntsong-auth/backend/src/service/v1/gen/handler/menu"
	msg "gitee.com/wuntsong-auth/backend/src/service/v1/gen/handler/msg"
	oauth2 "gitee.com/wuntsong-auth/backend/src/service/v1/gen/handler/oauth2"
	pay "gitee.com/wuntsong-auth/backend/src/service/v1/gen/handler/pay"
	peers "gitee.com/wuntsong-auth/backend/src/service/v1/gen/handler/peers"
	register "gitee.com/wuntsong-auth/backend/src/service/v1/gen/handler/register"
	second_check "gitee.com/wuntsong-auth/backend/src/service/v1/gen/handler/second_check"
	ui "gitee.com/wuntsong-auth/backend/src/service/v1/gen/handler/ui"
	verify "gitee.com/wuntsong-auth/backend/src/service/v1/gen/handler/verify"
	ws "gitee.com/wuntsong-auth/backend/src/service/v1/gen/handler/ws"
	"gitee.com/wuntsong-auth/backend/src/service/v1/gen/svc"

	"github.com/wuntsong-org/go-zero-plus/rest"
)

func RegisterHandlers(server *rest.Server, serverCtx *svc.ServiceContext) {
	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.Develop},
			[]rest.Route{
				{
					Method:  http.MethodGet,
					Path:    "/",
					Handler: health.PingHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/captcha",
					Handler: health.PingCaptchaHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/user",
					Handler: health.PingUserHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/api/v1/ping"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.PolicyCheck},
			[]rest.Route{
				{
					Method:  http.MethodGet,
					Path:    "/",
					Handler: center.HeaderHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/user",
					Handler: center.UserHeaderHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/api/v1/public/header"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.PolicyCheck},
			[]rest.Route{
				{
					Method:  http.MethodGet,
					Path:    "/",
					Handler: application.GetApplicationHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/api/v1/public/application"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.PolicyCheck},
			[]rest.Route{
				{
					Method:  http.MethodGet,
					Path:    "/",
					Handler: agreement.GetAgreementHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/api/v1/public/agreement"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.PolicyCheck},
			[]rest.Route{
				{
					Method:  http.MethodGet,
					Path:    "/list",
					Handler: center.GetDiscountListHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/api/v1/public/discount"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.PolicyCheck},
			[]rest.Route{
				{
					Method:  http.MethodGet,
					Path:    "/footer",
					Handler: ui.GetFooterHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/file",
					Handler: ui.GetFileHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/api/v1/public/ui"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.PolicyCheck},
			[]rest.Route{
				{
					Method:  http.MethodGet,
					Path:    "/",
					Handler: before_check.GetAfsAppKeyHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/api/v1/public/afs"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.PolicyCheck},
			[]rest.Route{
				{
					Method:  http.MethodGet,
					Path:    "/",
					Handler: homepage.GetHomePageHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/api/v1/public/homepage"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.PolicyCheck},
			[]rest.Route{
				{
					Method:  http.MethodGet,
					Path:    "/",
					Handler: center.GetDefrayInfoHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/api/v1/public/defray"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.PolicyCheck},
			[]rest.Route{
				{
					Method:  http.MethodGet,
					Path:    "/list",
					Handler: center.GetAnnouncementListHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/api/v1/public/announcement"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.PolicyCheck},
			[]rest.Route{
				{
					Method:  http.MethodGet,
					Path:    "/",
					Handler: oauth2.GetDomainHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/api/v1/public/oauth2"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.PolicyCheck},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/",
					Handler: register.RegisterHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/api/v1/public/registrants"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.PolicyCheck},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/phone/send",
					Handler: before_check.SendPhoneCodeHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/email/send",
					Handler: before_check.SendEmailCodeHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/api/v1/public/checker-before/captcha/allow-website"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.PolicyCheck},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/alipay/face",
					Handler: before_check.StartFaceCheckHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/alipay/face/url",
					Handler: before_check.FaceUrlHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/alipay/face/internal/url",
					Handler: before_check.FaceInternalUrlHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/wechat/get",
					Handler: before_check.GetWeChatAppIDHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/api/v1/public/checker-before/allow-website"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.PolicyCheck},
			[]rest.Route{
				{
					Method:  http.MethodGet,
					Path:    "/fuwuhao/get",
					Handler: before_check.GetFuwuhaoAppIDHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/alipay/get",
					Handler: before_check.GetAlipayAppIDHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/totp/get",
					Handler: before_check.GetTotpUrlHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/salt/get",
					Handler: before_check.GetFrontSaltHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/api/v1/public/checker-before"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.PolicyCheck},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/password",
					Handler: check.CheckPasswordHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/idcard",
					Handler: check.IDCardLoginHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/legalperson",
					Handler: check.LegalPersonLoginHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/api/v1/public/checker/captcha"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.PolicyCheck},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/secondfa",
					Handler: check.CheckSecondFAHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/api/v1/public/checker/captcha/allow-website"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.PolicyCheck},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/wechat",
					Handler: check.CheckWechatHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/phone",
					Handler: check.CheckPhoneCodeHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/email",
					Handler: check.CheckEmailCodeHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/face",
					Handler: check.CheckFaceHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/user",
					Handler: check.CheckUserHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/company",
					Handler: check.CheckCompanyHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/api/v1/public/checker/allow-website"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.PolicyCheck},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/fuwuhao",
					Handler: check.CheckFuwuhaoHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/api/v1/public/checker"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.PolicyCheck},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/2fa",
					Handler: second_check.Login2FACheckHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/api/v1/public/checker-after"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.PolicyCheck},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/",
					Handler: oauth2.LoginHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/open",
					Handler: oauth2.OpenOauth2Handler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/api/v1/user/oauth2"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.PolicyCheck},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/pay/refund",
					Handler: center.RefundHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/defray/return",
					Handler: center.ReturnHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/delete",
					Handler: center.DeleteUserHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/api/v1/user/center/double-check"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.PolicyCheck},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/pay/alipay/pc",
					Handler: center.AlipayHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/pay/wechatpay/native",
					Handler: center.WechatPayHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/pay/alipay/wap",
					Handler: center.AlipayWapHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/pay/wechatpay/h5",
					Handler: center.WechatPayWapHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/pay/wechatpay/jsapi",
					Handler: center.WechatPayJsAPIHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/pay/selfpay",
					Handler: center.SelfpayHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/withdraw/alipay",
					Handler: center.AlipayWithdrawHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/withdraw/wechatpay",
					Handler: center.WechatpayWithdrawHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/withdraw/selfpay",
					Handler: center.SelfpayWithdrawHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/defray",
					Handler: center.DefrayHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/api/v1/user/center"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.PolicyCheck},
			[]rest.Route{
				{
					Method:  http.MethodGet,
					Path:    "/message/list",
					Handler: center.GetMessageListHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/message/read",
					Handler: center.ReadMessageHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/message/read/all",
					Handler: center.ReadAllMessageHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/order/list",
					Handler: center.GetOrderListHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/order/communicate/list",
					Handler: center.GetCommunicateListHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/order/file",
					Handler: center.GetOrderFileHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/order/create",
					Handler: center.CreateOrderHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/order/reply",
					Handler: center.ReplyOrderHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/order/finish",
					Handler: center.FinishOrderHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/defray/list",
					Handler: center.GetDefrayListHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/defray/owner/list",
					Handler: center.GetDefrayOwnerListHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/back/list",
					Handler: center.GetBackListHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/audit/list",
					Handler: center.GetAuditHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/api/v1/user/center/allow-website"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.PolicyCheck},
			[]rest.Route{
				{
					Method:  http.MethodGet,
					Path:    "/info",
					Handler: center.GetInfoHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/token/delete",
					Handler: center.DeleteTokenHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/pay/list",
					Handler: center.GetPayListHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/pay/query",
					Handler: center.QueryTradeHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/refund/query",
					Handler: center.QueryRefundHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/withdraw/list",
					Handler: center.GetWithdrawListHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/withdraw/query",
					Handler: center.QueryWithdrawHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/wallet/record/list",
					Handler: center.GetWalletRecordListHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/invoice/list",
					Handler: center.GetInvoiceListHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/invoice/get",
					Handler: center.GetInvoiceHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/invoice/download",
					Handler: center.DownloadInvoiceHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/coupons/list",
					Handler: center.GetCouponsListHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/discount/join",
					Handler: center.JoinDiscountHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/son/tree",
					Handler: center.GetSonTreeHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/son/register",
					Handler: center.RegisterSonHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/son/token",
					Handler: center.GetSonTokenHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/uncle/list",
					Handler: center.GetUncleListHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/uncle/add",
					Handler: center.AddUncleHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/uncle/del",
					Handler: center.DelUncleHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/nephew/list",
					Handler: center.GetNephewListHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/nephew/add",
					Handler: center.AcceptNephewHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/nephew/del",
					Handler: center.DelNephewHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/father",
					Handler: center.GetFatherHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/invite",
					Handler: center.GetInviteHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/invite/list",
					Handler: center.GetInviteListHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/invoice",
					Handler: center.InvoiceHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/invoice/return",
					Handler: center.InvoiceReturnHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/signin/update",
					Handler: center.UpdateSigninHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/2fa/delete/secret",
					Handler: center.Delete2FAWithSecretHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/2fa/bind",
					Handler: center.Bind2FAHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/password/update",
					Handler: center.UpdatePasswordHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/wxrobot/update",
					Handler: center.UpdateWXRobotHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/title/update",
					Handler: center.UpdateTitleHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/address/update",
					Handler: center.UpdateAddressHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/token/expiration/update",
					Handler: center.UpdateTokenExpirationHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/loginctrl/update",
					Handler: center.UpdateLoginControllerHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/homepage/update",
					Handler: center.UpdateHomePageHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/header/update",
					Handler: center.UpdateHeaderHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/nickname/update",
					Handler: center.UpdateNicknameHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/phone/update",
					Handler: center.UpdatePhoneHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/email/update",
					Handler: center.UpdateEmailHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/wechat/update",
					Handler: center.UpdateWeChatHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/username/update",
					Handler: center.UpdateUserNameHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/api/v1/user/center"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.PolicyCheck},
			[]rest.Route{
				{
					Method:  http.MethodGet,
					Path:    "/",
					Handler: menu.GetMenuHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/api/v1/user/center/menu"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.PolicyCheck},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/userinfo/json/upload",
					Handler: center.UploadUserInfoByJsonHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/companyinfo/json/upload",
					Handler: center.UploadCompanyInfoByJsonHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/userinfo/upload",
					Handler: center.UploadUserInfoHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/companyinfo/upload",
					Handler: center.UploadCompanyInfoHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/userinfo/face/upload",
					Handler: center.UploadUserFaceHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/companyinfo/face/upload",
					Handler: center.UploadCompanyFaceHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/2fa/delete",
					Handler: center.Delete2FAHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/api/v1/user/center/root-only"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.WebSocket, serverCtx.PolicyCheck},
			[]rest.Route{
				{
					Method:  http.MethodGet,
					Path:    "/",
					Handler: center.WSGetInfoHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/api/v1/user/ws"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.PolicyCheck},
			[]rest.Route{
				{
					Method:  http.MethodGet,
					Path:    "/list",
					Handler: admin_user.GetUserListHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/data",
					Handler: admin_user.GetUserHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/homepage",
					Handler: admin_user.GetUserHomepageHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/son",
					Handler: admin_user.GetUserSonHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/data/remark/update",
					Handler: admin_user.UpdateRemarkHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/loginctrl/update",
					Handler: admin_user.UpdateLoginControllerHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/phone/update",
					Handler: admin_user.UpdatePhoneHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/email/update",
					Handler: admin_user.UpdateEmailHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/password/update",
					Handler: admin_user.UpdatePasswordHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/username/update",
					Handler: admin_user.UpdateUserNameHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/wechat/delete",
					Handler: admin_user.DeleteWechatHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/secondfa/delete",
					Handler: admin_user.Update2FAHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/token/all",
					Handler: admin_user.GetUserTokenListHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/token/son/all",
					Handler: admin_user.GetUserSonTokenListHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/token/delete/all",
					Handler: admin_user.DeleteOneUserAllTokenHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/token/son/delete/all",
					Handler: admin_user.DeleteOneUserAllSonTokenHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/token/father/delete/all",
					Handler: admin_user.DeleteOneUserAllFatherTokenHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/token/website/delete/all",
					Handler: admin_user.DeleteOneUserAllWebsiteTokenHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/token/delete",
					Handler: admin_user.DeleteTokenHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/oauth2/all",
					Handler: admin_user.GetLoginTokenListHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/oauth2/record/list",
					Handler: admin_user.GetOauthRecordListHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/oauth2/banned/list",
					Handler: admin_user.GetOauthBannedListHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/oauth2/delete",
					Handler: admin_user.DeleteOauth2TokenHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/oauth2/delete/all",
					Handler: admin_user.DeleteOneUserAllOauth2TokenHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/oauth2/banned",
					Handler: admin_user.BannedOauth2Handler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/header/upload",
					Handler: admin_user.UploadDefaultHeaderHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/api/v1/admin/user"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.PolicyCheck},
			[]rest.Route{
				{
					Method:  http.MethodGet,
					Path:    "/",
					Handler: admin_user.GetUserFinanceHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/pay/info",
					Handler: admin_user.GetPayInfoHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/pay/list",
					Handler: admin_user.GetUserPayListHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/defray/info",
					Handler: admin_user.GetDefrayInfoHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/defray/list",
					Handler: admin_user.GetUserDefrayListHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/defray/owner/list",
					Handler: admin_user.GetUserOwnerDefrayListHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/back/info",
					Handler: admin_user.GetBackInfoHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/back/list",
					Handler: admin_user.GetUserBackListHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/withdraw/info",
					Handler: admin_user.GetWithdrawInfoHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/withdraw/list",
					Handler: admin_user.GetWithdrawListHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/wallet/record/list",
					Handler: admin_user.GetWalletRecordListHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/wallet/record/remark/update",
					Handler: admin_user.GetWalletRemarkUpdateHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/invoice/list",
					Handler: admin_user.GetUserInvoiceListHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/invoice/info",
					Handler: admin_user.GetInvoiceInfoHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/invoice/download",
					Handler: admin_user.DownloadInvoiceHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/pay/remark/update",
					Handler: admin_user.UpdatePayRemarkHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/defray/remark/update",
					Handler: admin_user.UpdateDefrayRemarkHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/invoice/remark/update",
					Handler: admin_user.UpdateInvoiceRemarkHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/back/remark/update",
					Handler: admin_user.UpdateBackRemarkHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/withdraw/remark/update",
					Handler: admin_user.UpdateWithdrawRemarkHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/withdraw/self/process",
					Handler: admin_user.ProcessWithdrawHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/pay/self/process",
					Handler: admin_user.ProcessSelfPayHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/pay/refund/process",
					Handler: admin_user.ProcessRefundHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/pay/refund/inside/process",
					Handler: admin_user.ProcessRefundInsideHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/defray/return/process",
					Handler: admin_user.ProcessReturnHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/invoice/process",
					Handler: admin_user.ProcessInvoiceHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/invoice/blue/upload",
					Handler: admin_user.BlueInvoiceUploadHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/invoice/red/upload",
					Handler: admin_user.RedInvoiceUploadHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/pay/admin/add",
					Handler: admin_user.AddPayHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/withdraw/admin/add",
					Handler: admin_user.AddWithdrawHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/invoice/admin/add",
					Handler: admin_user.AddInvoiceHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/invoice/billed/add",
					Handler: admin_user.AddBilledHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/invoice/billed/sub",
					Handler: admin_user.SubBilledHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/defray/admin/add",
					Handler: admin_user.AddDefrayHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/back/admin/add",
					Handler: admin_user.AddBackHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/api/v1/admin/finance"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.PolicyCheck},
			[]rest.Route{
				{
					Method:  http.MethodGet,
					Path:    "/",
					Handler: admin_user.GetUserInfoHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/api/v1/admin/info"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.PolicyCheck},
			[]rest.Route{
				{
					Method:  http.MethodGet,
					Path:    "/all",
					Handler: center.GetAllTokenHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/other/delete",
					Handler: center.DeleteOtherTokenHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/all/delete",
					Handler: center.DeleteAllTokenHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/api/v1/admin/center/token"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.PolicyCheck},
			[]rest.Route{
				{
					Method:  http.MethodGet,
					Path:    "/list",
					Handler: oauth2.GetListHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/delete",
					Handler: oauth2.DeleteTokenHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/delete/all",
					Handler: oauth2.DeleteAllTokenHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/record/list",
					Handler: oauth2.GetOauthRecordListHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/banned/list",
					Handler: oauth2.GetOauthBannedListHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/website",
					Handler: oauth2.GetWebsiteListHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/api/v1/admin/center/oauth2"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.PolicyCheck},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/banned",
					Handler: oauth2.BannedOauth2Handler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/api/v1/admin/center/oauth2/double-check"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.PolicyCheck},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/register",
					Handler: admin_user.RegisterSonHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/api/v1/admin/center/son"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.PolicyCheck},
			[]rest.Route{
				{
					Method:  http.MethodGet,
					Path:    "/list",
					Handler: admin_user.GetDiscountListHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/create",
					Handler: admin_user.CreateDiscountHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/update",
					Handler: admin_user.UpdateDiscountHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/delete",
					Handler: admin_user.DeleteDiscountHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/join",
					Handler: admin_user.JoinDiscountHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/coupons/list",
					Handler: admin_user.GetCouponsListHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/api/v1/admin/discount"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.PolicyCheck},
			[]rest.Route{
				{
					Method:  http.MethodGet,
					Path:    "/message/msg/list",
					Handler: admin_user.GetUserMessageListHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/message/sms/list",
					Handler: admin_user.GetUserSmsMessageListHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/message/email/list",
					Handler: admin_user.GetUserEmailMessageListHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/message/fuwuhao/list",
					Handler: admin_user.GetUserFuwuhaoMessageListHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/message/wxrobot/list",
					Handler: admin_user.GetUserWxrobotMessageListHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/audit/list",
					Handler: admin_user.GetAuditHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/send/sms",
					Handler: admin_user.SendSMSHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/send/email",
					Handler: admin_user.SendEmailHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/send/msg",
					Handler: admin_user.SendMsgHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/send/wxrobot",
					Handler: admin_user.SendWXRobotHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/send/fuwuhao",
					Handler: admin_user.SendFuwuhaoHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/order/list",
					Handler: admin_user.GetOrderListHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/order/communicate/list",
					Handler: admin_user.GetCommunicateListHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/order/file",
					Handler: admin_user.GetOrderFileHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/order/remark/update",
					Handler: admin_user.UpdateOrderRemarkHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/order/finish",
					Handler: admin_user.ChangeOrderStatusHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/order/create",
					Handler: admin_user.CreateOrderHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/order/reply",
					Handler: admin_user.ReplyOrderHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/api/v1/admin/msg/allow-website"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.PolicyCheck},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/status/update",
					Handler: admin_user.UpdateStatusHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/api/v1/admin/user/double-check"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.PolicyCheck},
			[]rest.Route{
				{
					Method:  http.MethodGet,
					Path:    "/website",
					Handler: admin_application.GetWebsiteListHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/list",
					Handler: admin_application.GetApplicationListHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/db/update",
					Handler: admin_application.DBUpdateHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/create",
					Handler: admin_application.AddApplicationHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/delete",
					Handler: admin_application.DeleteApplicationHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/update",
					Handler: admin_application.UpdateApplicationHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/move",
					Handler: admin_application.MoveApplicationHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/api/v1/admin/application"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.PolicyCheck},
			[]rest.Route{
				{
					Method:  http.MethodGet,
					Path:    "/list",
					Handler: admin_website.GetWebsiteListHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/all",
					Handler: admin_website.GetAllPermissionsHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/funding/list",
					Handler: admin_website.AdminGetWebsiteFundingListHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/funding/remark/update",
					Handler: admin_website.AdminWebsiteFundingRemarkUpdateHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/funding/year",
					Handler: admin_website.AdminGetWebsiteFundingYearSumListHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/update",
					Handler: admin_website.UpdateWebsiteHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/pubkey/change",
					Handler: admin_website.ChangeWebsiteSecretHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/ip/create",
					Handler: admin_website.AddWebsiteIPHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/ip/delete",
					Handler: admin_website.DeleteWebsiteIPHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/domain/create",
					Handler: admin_website.AddWebsiteDomainHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/domain/delete",
					Handler: admin_website.DeleteWebsiteDomainHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/api/v1/admin/website/allow-website"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.PolicyCheck},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/db/update",
					Handler: admin_website.DBUpdateHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/create",
					Handler: admin_website.AddWebsiteHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/delete",
					Handler: admin_website.DeleteWebsiteHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/api/v1/admin/website"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.PolicyCheck},
			[]rest.Route{
				{
					Method:  http.MethodGet,
					Path:    "/list",
					Handler: admin_website_permission.GetPermissionListHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/db/update",
					Handler: admin_website_permission.DBUpdateHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/create",
					Handler: admin_website_permission.AddPermissionHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/delete",
					Handler: admin_website_permission.DeletePermissionHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/update",
					Handler: admin_website_permission.UpdatePermissionHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/move",
					Handler: admin_website_permission.MovePermissionHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/api/v1/admin/website-permission"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.PolicyCheck},
			[]rest.Route{
				{
					Method:  http.MethodGet,
					Path:    "/list",
					Handler: admin_website_path.GetPathListHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/all",
					Handler: admin_website_path.GetAllPermissionsHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/db/update",
					Handler: admin_website_path.DBUpdateHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/create",
					Handler: admin_website_path.AddPathHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/delete",
					Handler: admin_website_path.DeletePathHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/update",
					Handler: admin_website_path.UpdatePathHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/api/v1/admin/website-path"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.PolicyCheck},
			[]rest.Route{
				{
					Method:  http.MethodGet,
					Path:    "/list",
					Handler: admin_agreement.GetAgreementListHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/create",
					Handler: admin_agreement.CreateAgreementHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/update",
					Handler: admin_agreement.UpdateAgreementHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/delete",
					Handler: admin_agreement.DeleteAgreementHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/api/v1/admin/agreement"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.PolicyCheck},
			[]rest.Route{
				{
					Method:  http.MethodGet,
					Path:    "/file/list",
					Handler: admin_ui.GetFileListHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/footer/update",
					Handler: admin_ui.UpdateFooterHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/file/delete",
					Handler: admin_ui.DeleteFileHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/file/update",
					Handler: admin_ui.UploadFileHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/api/v1/admin/ui"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.PolicyCheck},
			[]rest.Route{
				{
					Method:  http.MethodGet,
					Path:    "/list",
					Handler: admin_permission.GetPermissionListHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/db/update",
					Handler: admin_permission.DBUpdateHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/create",
					Handler: admin_permission.AddPermissionHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/delete",
					Handler: admin_permission.DeletePermissionHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/update",
					Handler: admin_permission.UpdatePermissionHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/move",
					Handler: admin_permission.MovePermissionHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/api/v1/admin/permission"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.PolicyCheck},
			[]rest.Route{
				{
					Method:  http.MethodGet,
					Path:    "/list",
					Handler: admin_path.GetPathListHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/all",
					Handler: admin_path.GetAllPermissionsHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/sub/all",
					Handler: admin_path.GetAllSubPermissionsHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/db/update",
					Handler: admin_path.DBUpdateHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/create",
					Handler: admin_path.AddPathHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/delete",
					Handler: admin_path.DeletePathHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/update",
					Handler: admin_path.UpdatePathHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/api/v1/admin/path"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.PolicyCheck},
			[]rest.Route{
				{
					Method:  http.MethodGet,
					Path:    "/list",
					Handler: admin_menu.GetMenuListHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/all",
					Handler: admin_menu.GetAllPermissionsHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/sub/all",
					Handler: admin_menu.GetAllSubPermissionsHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/db/update",
					Handler: admin_menu.DBUpdateHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/create",
					Handler: admin_menu.AddMenuHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/delete",
					Handler: admin_menu.DeleteMenuHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/update",
					Handler: admin_menu.UpdateMenuHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/move",
					Handler: admin_menu.MoveMenuHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/api/v1/admin/menu"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.PolicyCheck},
			[]rest.Route{
				{
					Method:  http.MethodGet,
					Path:    "/list",
					Handler: admin_announcement.GetAnnouncementListHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/create",
					Handler: admin_announcement.AddAnnouncementHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/delete",
					Handler: admin_announcement.DeleteAnnouncementHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/update",
					Handler: admin_announcement.UpdateAnnouncementHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/move",
					Handler: admin_announcement.MoveAnnouncementHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/api/v1/admin/announcement"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.PolicyCheck},
			[]rest.Route{
				{
					Method:  http.MethodGet,
					Path:    "/access/list",
					Handler: admin_accessrecord.GetAccessRecordListHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/token/list",
					Handler: admin_accessrecord.GetTokenRecordListHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/access/token/list",
					Handler: admin_accessrecord.GetAccessRecordListByTokenHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/token/token/list",
					Handler: admin_accessrecord.GetTokenRecordListByTokenHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/access/cond/list",
					Handler: admin_accessrecord.GetAccessRecordListByCondHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/access/info",
					Handler: admin_accessrecord.GetAccessRecordHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/api/v1/admin/accessrecord"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.PolicyCheck},
			[]rest.Route{
				{
					Method:  http.MethodGet,
					Path:    "/list",
					Handler: admin_role.GetRoleListHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/all",
					Handler: admin_role.GetAllPermissionsHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/website",
					Handler: admin_role.GetWebsiteListHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/db/update",
					Handler: admin_role.DBUpdateHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/change",
					Handler: admin_role.ChangeUserRoleHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/create",
					Handler: admin_role.RoleCreateHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/update",
					Handler: admin_role.RoleUpdateHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/delete",
					Handler: admin_role.DeleteRoleHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/api/v1/admin/role"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.IPCheck},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/oauth2",
					Handler: verify.LoginTokenHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/phone",
					Handler: verify.PhoneTokenHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/email",
					Handler: verify.EmailTokenHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/idcard",
					Handler: verify.IDCardTokenHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/company",
					Handler: verify.CompanyTokenHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/face",
					Handler: verify.FaceTokenHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/secondfa",
					Handler: verify.SecondFAHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/api/v1/website/inspector"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.IPCheck},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/create",
					Handler: defray.CreateDefrayHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/back/create",
					Handler: defray.CreateBackHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/query",
					Handler: defray.QueryDefrayHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/return",
					Handler: defray.ReturnDefrayHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/api/v1/website/defray"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.IPCheck},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/sms",
					Handler: msg.SendSMSHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/email",
					Handler: msg.SendEmailHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/msg",
					Handler: msg.SendMsgHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/wxrobot",
					Handler: msg.SendWXRobotHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/fuwuhao",
					Handler: msg.SendFuwuhaoHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/audit",
					Handler: msg.SendAuditHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/order",
					Handler: msg.SendWorkOrderHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/api/v1/website/msg"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.WebSocket, serverCtx.IPCheck},
			[]rest.Route{
				{
					Method:  http.MethodGet,
					Path:    "/",
					Handler: ws.WSGetInfoHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/api/v1/website/ws"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/alipay/noti",
				Handler: pay.AlipayNotiHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/alipay/wangguan/noti",
				Handler: pay.AlipayWangguanNotiHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/wechatpay/noti",
				Handler: pay.WechatPayNotiHandler(serverCtx),
			},
		},
		rest.WithPrefix("/api/v1/pay"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodGet,
				Path:    "/noti",
				Handler: fuwuhao.CheckHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/noti",
				Handler: fuwuhao.NotiHandler(serverCtx),
			},
		},
		rest.WithPrefix("/api/v1/fuwuhao"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.WebSocket},
			[]rest.Route{
				{
					Method:  http.MethodGet,
					Path:    "/",
					Handler: peers.WSGetInfoHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/api/v1/peers/ws"),
	)
}
